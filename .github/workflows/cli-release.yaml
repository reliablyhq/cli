name: Reliably CLI Release

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

jobs:
  checks:
    uses: ./.github/workflows/cli-check.yaml
  build-wheels:
    name: Build wheels
    runs-on: ubuntu-22.04
    needs:
      - checks
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up PDM
        uses: pdm-project/setup-pdm@v3
        with:
          python-version: "3.10"
      - name: Build wheel
        run: |
          pdm build --no-sdist
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          path: dist/
          if-no-files-found: error

  publish-wheels:
    name: Publish wheels
    runs-on: ubuntu-22.04
    needs:
      - build-wheels
    steps:
      - name: Retrieve wheel
        uses: actions/download-artifact@v3
        with:
          path: dist/
      - name: Publish wheels
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          pdm publish
        env:
          PDM_PUBLISH_USERNAME: __token__
          PDM_PUBLISH_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  build-container:
    name: Build containers
    runs-on: ubuntu-22.04
    needs:
      - build-wheels
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Container
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64, linux/arm64
          file: ./Dockerfile
          tags: |
            ghcr.io/reliablyhq/cli:latest

  build-binary:
    name: Build executable for '${{ matrix.target }}' on '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-22.04
          target: x86_64-unknown-linux-gnu
        - os: windows-2022
          target: x86_64-pc-windows-msvc
        - os: macos-10.15
          target: x86_64-apple-darwin
        - os: macos-12
          target: aarch64-apple-darwin
    needs:
      - build-wheels
    env:
      LZMA_API_STATIC: '1'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up PDM
        uses: pdm-project/setup-pdm@v3
        with:
          python-version: "3.10"
          cache: true
      - if: matrix.target == 'x86_64-unknown-linux-gnu'
        name: Install musl
        run: |
          sudo apt update
      
      - if: matrix.target == 'x86_64-unknown-linux-musl'
        name: Install musl
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends musl-tools

      - if: runner.os != 'Windows'
        name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build binary (not Windows)
        if: runner.os != 'Windows'
        run: |
          pdm config python.use_venv true
          pdm sync -G bin-builder

          if [ "${{ matrix.target.triple }}" = "aarch64-apple-darwin" ]; then
            export MACOSX_DEPLOYMENT_TARGET=11.0
          elif [ "${{ matrix.target.triple }}" = "x86_64-apple-darwin" ]; then
            export MACOSX_DEPLOYMENT_TARGET=10.9
          fi

          pdm run pyoxidizer build --release --target-triple ${{ matrix.target }}
          cp build/**/release/install/reliably reliably-${{ matrix.target }}
      
      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        run: |
          pdm config python.use_venv true
          pdm sync -G bin-builder
          pdm run pyoxidizer build msi --release --target-triple ${{ matrix.target }}
          echo F | xcopy build\${{ matrix.target }}\release\msi\Reliably*.msi reliably-${{ matrix.target }}.msi
      
      - if: runner.os != 'Windows'
        name: Strip binary
        run: strip reliably-${{ matrix.target }}

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          path: reliably-*
          if-no-files-found: error
